# ig_explanation.py
# 安装依赖
!pip install -q numpy==1.23.5 tensorflow==2.14.1 alibi==0.9.6 matplotlib==3.7.1

import numpy as np
import tensorflow as tf
from tensorflow.keras.datasets import imdb
from tensorflow.keras.preprocessing import sequence
from alibi.explainers import IntegratedGradients
import matplotlib.pyplot as plt

# 配置参数
max_features = 5000
maxlen = 50

# 加载精简数据集
(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=max_features)
x_train = sequence.pad_sequences(x_train, maxlen=maxlen)
x_test = sequence.pad_sequences(x_test, maxlen=maxlen)

# 构建含嵌入层的模型
model = tf.keras.Sequential([
    tf.keras.layers.Embedding(max_features, 32, input_length=maxlen),
    tf.keras.layers.GlobalAvgPool1D(),
    tf.keras.layers.Dense(1, activation='sigmoid')
])
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.fit(x_train, y_train, epochs=2, batch_size=128)

# IG解释主程序
def ig_explain(sentence):
    # 文本向量化
    word_index = imdb.get_word_index()
    reverse_index = {v+3: k for k, v in word_index.items()}
    
    def vectorize(text):
        tokens = [word_index.get(word.lower(), 0)+3 for word in text.split()]
        return sequence.pad_sequences([tokens], maxlen=maxlen)[0]
    
    # 准备输入
    sample_vec = vectorize(sentence)
    baseline = np.zeros_like(sample_vec)  # 使用零基线
    
    # 初始化IG
    ig = IntegratedGradients(
        model,
        layer=model.layers[0],  # 嵌入层
        n_steps=20  # 减少步数加速计算
    )
    
    # 计算归因
    explanation = ig.explain(
        sample_vec.reshape(1, -1), 
        baselines=baseline.reshape(1, -1)
    )
    attrs = explanation.attributions[0].sum(axis=1)  # 聚合嵌入维度
    
    # 可视化
    tokens = [reverse_index.get(idx, 'UNK') for idx in sample_vec if idx != 0]
    plt.figure(figsize=(10, 3))
    plt.barh(tokens, attrs[:len(tokens)], color='purple')
    plt.title("Integrated Gradients Attribution")
    plt.show()

# 测试案例
if __name__ == "__main__":
    test_sentence = (
        "This film is disturbing but sincere. It's worth the time "
        "though difficult to find in stores."
    )
    ig_explain(test_sentence)
